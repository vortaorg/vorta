{"abi":[{"type":"function","name":"verifyAndAttestOnChain","inputs":[{"name":"input","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"output","type":"bytes","internalType":"bytes"}],"stateMutability":"nonpayable"},{"type":"function","name":"verifyAndAttestWithZKProof","inputs":[{"name":"journal","type":"bytes","internalType":"bytes"},{"name":"seal","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"output","type":"bytes","internalType":"bytes"}],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"verifyAndAttestOnChain(bytes)":"38d8480a","verifyAndAttestWithZKProof(bytes,bytes)":"13f19c80"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"verifyAndAttestOnChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"output\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"journal\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"seal\",\"type\":\"bytes\"}],\"name\":\"verifyAndAttestWithZKProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"output\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"should also implement Risc0 Guest Program to use this interface. See https://dev.risczero.com/api/blockchain-integration/bonsai-on-eth to learn more\",\"kind\":\"dev\",\"methods\":{\"verifyAndAttestOnChain(bytes)\":{\"details\":\"must further specify the structure of inputs/outputs, to be serialized and passed to this methodcan directly type cast the failed output as a string\",\"params\":{\"input\":\"- serialized raw input as defined by the project\"},\"returns\":{\"output\":\"- the output upon completion of verification. The output data may require post-processing by the consumer. For verification failures, the output is simply a UTF-8 encoded string, describing the reason for failure.\",\"success\":\"- whether the quote has been successfully verified or not\"}},\"verifyAndAttestWithZKProof(bytes,bytes)\":{\"params\":{\"journal\":\"- The output of the Guest program, this includes: - VerifiedOutput struct - TcbInfo hash - QEID hash - RootCA hash - TCB Signing CA hash - Root CRL hash - Platform CRL hash - Processor CRL hash\",\"seal\":\"- The encoded cryptographic proof (i.e. SNARK).\"}}},\"title\":\"Interface standard that implement attestation contracts whose verification logic can be implemented both on-chain and with Risc0 ZK proofs\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verifyAndAttestOnChain(bytes)\":{\"notice\":\"full on-chain verification for an attestation\"}},\"notice\":\"The interface simply provides two verification methods for a given attestation input. The user can either pay a possibly hefty gas cost to fully verify an attestation fully on-chain OR Provides ZK proofs from executing an off-chain program where the verification of such attestation is conducted.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/IAttestation.sol\":\"IAttestation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@automata-network/on-chain-pccs/=lib/automata-on-chain-pccs/src/\",\":@openzeppelin/contracts/=lib/automata-on-chain-pccs/lib/openzeppelin-contracts/contracts/\",\":automata-on-chain-pccs/=lib/automata-on-chain-pccs/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/automata-on-chain-pccs/lib/openzeppelin-contracts/lib/erc4626-tests/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/automata-on-chain-pccs/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts/=lib/automata-on-chain-pccs/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/risc0-ethereum/lib/openzeppelin-contracts/\",\":p256-verifier/=lib/automata-on-chain-pccs/lib/p256-verifier/src/\",\":risc0-ethereum/=lib/risc0-ethereum/\",\":risc0/=lib/risc0-ethereum/contracts/src/\",\":solady/=lib/automata-on-chain-pccs/lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"contracts/interfaces/IAttestation.sol\":{\"keccak256\":\"0x64954c9d466ead95796e876654ec5ac0d2ec03453ca5f726dee0b42ffcda3927\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e97ee5b35c188e99ed24dbca9b69f3f707750375238042ec00914e18d6ede04a\",\"dweb:/ipfs/QmNYREbdTv8hBP1TR9SPmaxSLp5LVNpvYUQbRyU23suoFq\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes","name":"input","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"verifyAndAttestOnChain","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"output","type":"bytes"}]},{"inputs":[{"internalType":"bytes","name":"journal","type":"bytes"},{"internalType":"bytes","name":"seal","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"verifyAndAttestWithZKProof","outputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"output","type":"bytes"}]}],"devdoc":{"kind":"dev","methods":{"verifyAndAttestOnChain(bytes)":{"details":"must further specify the structure of inputs/outputs, to be serialized and passed to this methodcan directly type cast the failed output as a string","params":{"input":"- serialized raw input as defined by the project"},"returns":{"output":"- the output upon completion of verification. The output data may require post-processing by the consumer. For verification failures, the output is simply a UTF-8 encoded string, describing the reason for failure.","success":"- whether the quote has been successfully verified or not"}},"verifyAndAttestWithZKProof(bytes,bytes)":{"params":{"journal":"- The output of the Guest program, this includes: - VerifiedOutput struct - TcbInfo hash - QEID hash - RootCA hash - TCB Signing CA hash - Root CRL hash - Platform CRL hash - Processor CRL hash","seal":"- The encoded cryptographic proof (i.e. SNARK)."}}},"version":1},"userdoc":{"kind":"user","methods":{"verifyAndAttestOnChain(bytes)":{"notice":"full on-chain verification for an attestation"}},"version":1}},"settings":{"remappings":["@automata-network/on-chain-pccs/=lib/automata-on-chain-pccs/src/","@openzeppelin/contracts/=lib/automata-on-chain-pccs/lib/openzeppelin-contracts/contracts/","automata-on-chain-pccs/=lib/automata-on-chain-pccs/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/automata-on-chain-pccs/lib/openzeppelin-contracts/lib/erc4626-tests/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/automata-on-chain-pccs/lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","hardhat/=node_modules/hardhat/","openzeppelin-contracts/=lib/automata-on-chain-pccs/lib/openzeppelin-contracts/","openzeppelin/=lib/risc0-ethereum/lib/openzeppelin-contracts/","p256-verifier/=lib/automata-on-chain-pccs/lib/p256-verifier/src/","risc0-ethereum/=lib/risc0-ethereum/","risc0/=lib/risc0-ethereum/contracts/src/","solady/=lib/automata-on-chain-pccs/lib/solady/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/interfaces/IAttestation.sol":"IAttestation"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"contracts/interfaces/IAttestation.sol":{"keccak256":"0x64954c9d466ead95796e876654ec5ac0d2ec03453ca5f726dee0b42ffcda3927","urls":["bzz-raw://e97ee5b35c188e99ed24dbca9b69f3f707750375238042ec00914e18d6ede04a","dweb:/ipfs/QmNYREbdTv8hBP1TR9SPmaxSLp5LVNpvYUQbRyU23suoFq"],"license":"MIT"}},"version":1},"id":8}